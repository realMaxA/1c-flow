#Использовать fs
#Использовать tempfiles
#Использовать v8runner

Перем Лог;
Перем мВременныеФайлы;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
		
	Лог = ПараметрыСистемы.ПолучитьЛог();

	Команда = Парсер.ОписаниеКоманды(ИмяКоманды, "Получить значение настройки системы");
	Парсер.ДобавитьКоманду(Команда);
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "Действие", "Действие, выполняемое над фичей: start/finish.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяФичи", "Буквенно-цифровой идентификатор фичи. Допустимы символы '-', '_'. Пробелы не допустимы.");
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	// TODO: Проверка выполнения инициализации

	мВременныеФайлы = Новый МенеджерВременныхФайлов();

	ИмяФичи = ПараметрыКоманды["ИмяФичи"];
	Действие = ПараметрыКоманды["Действие"];

	Если НРег(Действие) = "start" Тогда
		НачатьФичу(ИмяФичи);
	Иначе
		ВызватьИсключение СтрШаблон("Неизвестное действие <%1>", Действие);
	КонецЕсли;

	мВременныеФайлы.Удалить();

	Возврат 0;

КонецФункции

Процедура НачатьФичу(Знач ИмяФичи)

	Если НЕ ЗначениеЗаполнено(ИмяФичи) Тогда
		Консоль = Новый Консоль;
		Консоль.ВывестиСтроку("Укажите идентификатор новой фичи:");

		ИмяФичи = Консоль.ПрочитатьСтроку();
	КонецЕсли;

	// TODO: Явно не каталог временных файлов
	КаталогХранилищаДляФичи = ОбъединитьПути(КаталогВременныхФайлов(), Новый Файл(ТекущийКаталог()).Имя, ИмяФичи);
	// DEBUG
	Сообщить(КаталогХранилищаДляФичи);
	// ФС.ОбеспечитьПустойКаталог(КаталогХранилищаДляФичи);
	ПутьКСервиснойБазе = ОбъединитьПути(КаталогХранилищаДляФичи, "ibService"); 
	ФС.ОбеспечитьКаталог(ПутьКСервиснойБазе);
	БазаСуществует = НайтиФайлы(ПутьКСервиснойБазе, ПолучитьМаскуВсеФайлы()).Количество() > 0;

	ПользовательХранилища = "Администратор";
	ПарольХранилища = "";

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы("v8log.txt");
	Конфигуратор.СоздатьФайловоеХранилищеКонфигурации(КаталогХранилищаДляФичи, ПользовательХранилища, ПарольХранилища);
	Конфигуратор.УстановитьКонтекст("/F" + ПутьКСервиснойБазе, "", "");
	Если НЕ БазаСуществует Тогда
		Конфигуратор.СоздатьФайловуюБазу(ПутьКСервиснойБазе);
	КонецЕсли;
	
	// Получим версию, лежащую сейчас в стволе
	СП = Новый СохраняемыеПараметры;
	СтруктураПараметров = СП.Конструктор_СтруктураПараметров();
	ПользовательСтволовогоХранилища = СтруктураПараметров.ПользовательСтволовогоХранилища;
	ПарольСтволовогоХранилища = СтруктураПараметров.ПарольСтволовогоХранилища;
	СтрокаСоединенияСтволовогоХранилища = СтруктураПараметров.ПутьКСтволовомуХранилищу;

	ПутьКВерсииИзСтволовогоХранилища = Конфигуратор.ПолучитьВерсиюИзХранилища(СтрокаСоединенияСтволовогоХранилища, ПользовательСтволовогоХранилища, ПарольСтволовогоХранилища);
	Конфигуратор.ПодключитьсяКХранилищу(КаталогХранилищаДляФичи, ПользовательХранилища, ПарольХранилища);
	Конфигуратор.ЗахватитьОбъектыВХранилище(КаталогХранилищаДляФичи, ПользовательХранилища, ПарольХранилища);
	Конфигуратор.ОбъединитьКонфигурациюСФайлом(
		ПутьКВерсииИзСтволовогоХранилища,
		ОбъединитьПути(ТекущийКаталог(), "data", "MergeSettings.xml"),
		,
		,
		Истина
	);
	Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(КаталогХранилищаДляФичи, ПользовательХранилища, ПарольХранилища);
	
	ДанныеФичи = СП.Конструктор_ДанныеФичи();
	ДанныеФичи.ПутьКХранилищу = КаталогХранилищаДляФичи;
	ДанныеФичи.ПользовательХранилища = ПользовательХранилища;
	ДанныеФичи.ПарольХранилища = ПарольХранилища;

	СтруктураПараметров.Фичи.Вставить(ИмяФичи, ДанныеФичи);

	СП.СохранитьПараметры(СтруктураПараметров);

КонецПроцедуры